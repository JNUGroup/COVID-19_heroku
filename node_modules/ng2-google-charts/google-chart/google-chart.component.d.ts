import { ElementRef, OnChanges, SimpleChanges, EventEmitter } from '@angular/core';
import { GoogleChartsLoaderService } from '../google-charts-loader.service';
import { GoogleChartInterface, GoogleChartComponentInterface } from '../google-charts-interfaces';
import { ChartReadyEvent } from './chart-ready-event';
import { ChartErrorEvent } from './chart-error-event';
import { ChartSelectEvent } from './chart-select-event';
import { ChartMouseOverEvent, ChartMouseOutEvent } from './chart-mouse-event';
import { RegionClickEvent } from './geochart-events';
import * as ɵngcc0 from '@angular/core';
export declare class GoogleChartComponent implements OnChanges, GoogleChartComponentInterface {
    data: GoogleChartInterface;
    chartReady: EventEmitter<ChartReadyEvent>;
    chartReadyOneTime: EventEmitter<ChartReadyEvent>;
    chartError: EventEmitter<ChartErrorEvent>;
    chartErrorOneTime: EventEmitter<ChartErrorEvent>;
    chartSelect: EventEmitter<ChartSelectEvent>;
    chartSelectOneTime: EventEmitter<ChartSelectEvent>;
    mouseOver: EventEmitter<ChartMouseOverEvent>;
    mouseOverOneTime: EventEmitter<ChartMouseOverEvent>;
    mouseOut: EventEmitter<ChartMouseOutEvent>;
    mouseOutOneTime: EventEmitter<ChartMouseOutEvent>;
    regionClick: EventEmitter<RegionClickEvent>;
    regionClickOneTime: EventEmitter<RegionClickEvent>;
    wrapper: any;
    private cli;
    private options;
    private el;
    private loaderService;
    constructor(el: ElementRef, loaderService: GoogleChartsLoaderService);
    ngOnChanges(changes: SimpleChanges): void;
    draw(): void;
    private _draw;
    /**
     * Applies formatters to data columns, if defined
     */
    private reformat;
    private getSelectorBySeriesType;
    /**
     * Given a column number, counts how many
     * columns have rol=="data". Those are mapped
     * one-to-one to the series array. When rol is not defined
     * a column of type number means a series column.
     * @param column to inspect
     */
    private getSeriesByColumn;
    private getBoundingBoxForItem;
    private getValueAtPosition;
    private getColumnTypeAtPosition;
    private getColumnLabelAtPosition;
    private getHTMLTooltip;
    private parseMouseEvent;
    private unregisterEvents;
    private registerChartEvents;
    private registerChartWrapperEvents;
    private addListener;
    private addOneTimeListener;
    private mouseOverListener;
    private mouseOutListener;
    private selectListener;
    private convertOptions;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GoogleChartComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<GoogleChartComponent, "google-chart", never, { "data": "data"; }, { "chartSelect": "chartSelect"; "chartSelectOneTime": "chartSelectOneTime"; "chartReady": "chartReady"; "chartReadyOneTime": "chartReadyOneTime"; "chartError": "chartError"; "chartErrorOneTime": "chartErrorOneTime"; "mouseOver": "mouseOver"; "mouseOverOneTime": "mouseOverOneTime"; "mouseOut": "mouseOut"; "mouseOutOneTime": "mouseOutOneTime"; "regionClick": "regionClick"; "regionClickOneTime": "regionClickOneTime"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLWNoYXJ0LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJnb29nbGUtY2hhcnQuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEdvb2dsZUNoYXJ0c0xvYWRlclNlcnZpY2UgfSBmcm9tICcuLi9nb29nbGUtY2hhcnRzLWxvYWRlci5zZXJ2aWNlJztcbmltcG9ydCB7IEdvb2dsZUNoYXJ0SW50ZXJmYWNlLCBHb29nbGVDaGFydENvbXBvbmVudEludGVyZmFjZSB9IGZyb20gJy4uL2dvb2dsZS1jaGFydHMtaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBDaGFydFJlYWR5RXZlbnQgfSBmcm9tICcuL2NoYXJ0LXJlYWR5LWV2ZW50JztcbmltcG9ydCB7IENoYXJ0RXJyb3JFdmVudCB9IGZyb20gJy4vY2hhcnQtZXJyb3ItZXZlbnQnO1xuaW1wb3J0IHsgQ2hhcnRTZWxlY3RFdmVudCB9IGZyb20gJy4vY2hhcnQtc2VsZWN0LWV2ZW50JztcbmltcG9ydCB7IENoYXJ0TW91c2VPdmVyRXZlbnQsIENoYXJ0TW91c2VPdXRFdmVudCB9IGZyb20gJy4vY2hhcnQtbW91c2UtZXZlbnQnO1xuaW1wb3J0IHsgUmVnaW9uQ2xpY2tFdmVudCB9IGZyb20gJy4vZ2VvY2hhcnQtZXZlbnRzJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEdvb2dsZUNoYXJ0Q29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBHb29nbGVDaGFydENvbXBvbmVudEludGVyZmFjZSB7XG4gICAgZGF0YTogR29vZ2xlQ2hhcnRJbnRlcmZhY2U7XG4gICAgY2hhcnRSZWFkeTogRXZlbnRFbWl0dGVyPENoYXJ0UmVhZHlFdmVudD47XG4gICAgY2hhcnRSZWFkeU9uZVRpbWU6IEV2ZW50RW1pdHRlcjxDaGFydFJlYWR5RXZlbnQ+O1xuICAgIGNoYXJ0RXJyb3I6IEV2ZW50RW1pdHRlcjxDaGFydEVycm9yRXZlbnQ+O1xuICAgIGNoYXJ0RXJyb3JPbmVUaW1lOiBFdmVudEVtaXR0ZXI8Q2hhcnRFcnJvckV2ZW50PjtcbiAgICBjaGFydFNlbGVjdDogRXZlbnRFbWl0dGVyPENoYXJ0U2VsZWN0RXZlbnQ+O1xuICAgIGNoYXJ0U2VsZWN0T25lVGltZTogRXZlbnRFbWl0dGVyPENoYXJ0U2VsZWN0RXZlbnQ+O1xuICAgIG1vdXNlT3ZlcjogRXZlbnRFbWl0dGVyPENoYXJ0TW91c2VPdmVyRXZlbnQ+O1xuICAgIG1vdXNlT3Zlck9uZVRpbWU6IEV2ZW50RW1pdHRlcjxDaGFydE1vdXNlT3ZlckV2ZW50PjtcbiAgICBtb3VzZU91dDogRXZlbnRFbWl0dGVyPENoYXJ0TW91c2VPdXRFdmVudD47XG4gICAgbW91c2VPdXRPbmVUaW1lOiBFdmVudEVtaXR0ZXI8Q2hhcnRNb3VzZU91dEV2ZW50PjtcbiAgICByZWdpb25DbGljazogRXZlbnRFbWl0dGVyPFJlZ2lvbkNsaWNrRXZlbnQ+O1xuICAgIHJlZ2lvbkNsaWNrT25lVGltZTogRXZlbnRFbWl0dGVyPFJlZ2lvbkNsaWNrRXZlbnQ+O1xuICAgIHdyYXBwZXI6IGFueTtcbiAgICBwcml2YXRlIGNsaTtcbiAgICBwcml2YXRlIG9wdGlvbnM7XG4gICAgcHJpdmF0ZSBlbDtcbiAgICBwcml2YXRlIGxvYWRlclNlcnZpY2U7XG4gICAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYsIGxvYWRlclNlcnZpY2U6IEdvb2dsZUNoYXJ0c0xvYWRlclNlcnZpY2UpO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIGRyYXcoKTogdm9pZDtcbiAgICBwcml2YXRlIF9kcmF3O1xuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgZm9ybWF0dGVycyB0byBkYXRhIGNvbHVtbnMsIGlmIGRlZmluZWRcbiAgICAgKi9cbiAgICBwcml2YXRlIHJlZm9ybWF0O1xuICAgIHByaXZhdGUgZ2V0U2VsZWN0b3JCeVNlcmllc1R5cGU7XG4gICAgLyoqXG4gICAgICogR2l2ZW4gYSBjb2x1bW4gbnVtYmVyLCBjb3VudHMgaG93IG1hbnlcbiAgICAgKiBjb2x1bW5zIGhhdmUgcm9sPT1cImRhdGFcIi4gVGhvc2UgYXJlIG1hcHBlZFxuICAgICAqIG9uZS10by1vbmUgdG8gdGhlIHNlcmllcyBhcnJheS4gV2hlbiByb2wgaXMgbm90IGRlZmluZWRcbiAgICAgKiBhIGNvbHVtbiBvZiB0eXBlIG51bWJlciBtZWFucyBhIHNlcmllcyBjb2x1bW4uXG4gICAgICogQHBhcmFtIGNvbHVtbiB0byBpbnNwZWN0XG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRTZXJpZXNCeUNvbHVtbjtcbiAgICBwcml2YXRlIGdldEJvdW5kaW5nQm94Rm9ySXRlbTtcbiAgICBwcml2YXRlIGdldFZhbHVlQXRQb3NpdGlvbjtcbiAgICBwcml2YXRlIGdldENvbHVtblR5cGVBdFBvc2l0aW9uO1xuICAgIHByaXZhdGUgZ2V0Q29sdW1uTGFiZWxBdFBvc2l0aW9uO1xuICAgIHByaXZhdGUgZ2V0SFRNTFRvb2x0aXA7XG4gICAgcHJpdmF0ZSBwYXJzZU1vdXNlRXZlbnQ7XG4gICAgcHJpdmF0ZSB1bnJlZ2lzdGVyRXZlbnRzO1xuICAgIHByaXZhdGUgcmVnaXN0ZXJDaGFydEV2ZW50cztcbiAgICBwcml2YXRlIHJlZ2lzdGVyQ2hhcnRXcmFwcGVyRXZlbnRzO1xuICAgIHByaXZhdGUgYWRkTGlzdGVuZXI7XG4gICAgcHJpdmF0ZSBhZGRPbmVUaW1lTGlzdGVuZXI7XG4gICAgcHJpdmF0ZSBtb3VzZU92ZXJMaXN0ZW5lcjtcbiAgICBwcml2YXRlIG1vdXNlT3V0TGlzdGVuZXI7XG4gICAgcHJpdmF0ZSBzZWxlY3RMaXN0ZW5lcjtcbiAgICBwcml2YXRlIGNvbnZlcnRPcHRpb25zO1xufVxuIl19