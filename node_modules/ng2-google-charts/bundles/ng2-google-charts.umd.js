(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("@angular/core"));
	else if(typeof define === 'function' && define.amd)
		define(["@angular/core"], factory);
	else if(typeof exports === 'object')
		exports["ng2-google-charts.umd"] = factory(require("@angular/core"));
	else
		root["ng2-google-charts.umd"] = factory(root["@angular/core"]);
})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__0__;

/***/ }),
/* 1 */
/***/ (function(module, exports) {



/***/ }),
/* 2 */
/***/ (function(module, exports) {



/***/ }),
/* 3 */
/***/ (function(module, exports) {



/***/ }),
/* 4 */
/***/ (function(module, exports) {



/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: external "@angular/core"
var core_ = __webpack_require__(0);

// CONCATENATED MODULE: ./.tmp/google-chart/chart-html-tooltip.ts
var ChartHTMLTooltip = /** @class */ (function () {
    function ChartHTMLTooltip(el) {
        this.tooltipDOMElement = el;
    }
    ChartHTMLTooltip.prototype.setPosition = function (x, y) {
        this.tooltipDOMElement.nativeElement.style.left = x + ChartHTMLTooltip.PIXELS;
        this.tooltipDOMElement.nativeElement.style.top = y + ChartHTMLTooltip.PIXELS;
    };
    ChartHTMLTooltip.prototype.getDOMElement = function () {
        return this.tooltipDOMElement;
    };
    ChartHTMLTooltip.PIXELS = 'px';
    return ChartHTMLTooltip;
}());


// CONCATENATED MODULE: ./.tmp/google-chart/google-chart.component.ts
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};


var google_chart_component_GoogleChartComponent = /** @class */ (function () {
    function GoogleChartComponent(el, loaderService) {
        var _this = this;
        this.mouseOverListener = function (item) {
            var event = _this.parseMouseEvent(item);
            event.tooltip = _this.getHTMLTooltip();
            return event;
        };
        this.mouseOutListener = function (item) {
            var event = _this.parseMouseEvent(item);
            return event;
        };
        this.selectListener = function () {
            var event = {
                message: 'select',
                row: null,
                column: null,
                selectedRowValues: [],
                selectedRowFormattedValues: [],
                columnLabel: ''
            };
            var s = _this.wrapper.visualization.getSelection();
            var gs = s[s.length - 1];
            if (!gs) {
                event.message = 'deselect';
                return event;
            }
            var selection = gs;
            if (gs.row != null) {
                event.row = selection.row;
                var selectedRowValues = [];
                var selectedRowFormattedValues = [];
                var dataTable = _this.wrapper.getDataTable();
                var numberOfColumns = dataTable.getNumberOfColumns();
                for (var i = 0; i < numberOfColumns; i++) {
                    selectedRowValues.push(dataTable.getValue(selection.row, i));
                    selectedRowFormattedValues.push(dataTable.getFormattedValue(selection.row, i));
                }
                event.selectedRowValues = selectedRowValues;
                event.selectedRowFormattedValues = selectedRowFormattedValues;
            }
            if (selection.column != null) {
                event.column = selection.column;
                event.columnLabel = _this.getColumnLabelAtPosition(selection);
            }
            if (gs.name) {
                event.columnLabel = gs.name;
            }
            return event;
        };
        this.el = el;
        this.loaderService = loaderService;
        this.chartSelect = new core_["EventEmitter"]();
        this.chartSelectOneTime = new core_["EventEmitter"]();
        this.chartReady = new core_["EventEmitter"]();
        this.chartReadyOneTime = new core_["EventEmitter"]();
        this.chartError = new core_["EventEmitter"]();
        this.chartErrorOneTime = new core_["EventEmitter"]();
        this.mouseOver = new core_["EventEmitter"]();
        this.mouseOverOneTime = new core_["EventEmitter"]();
        this.mouseOut = new core_["EventEmitter"]();
        this.mouseOutOneTime = new core_["EventEmitter"]();
        this.regionClick = new core_["EventEmitter"]();
        this.regionClickOneTime = new core_["EventEmitter"]();
    }
    GoogleChartComponent.prototype.ngOnChanges = function (changes) {
        var _this = this;
        var key = 'data';
        if (changes[key]) {
            if (!this.data) {
                return;
            }
            this.options = this.data.options;
            if (!this.options) {
                this.options = {};
            }
            this.data.component = this;
            this.loaderService.load().then(function () {
                if (_this.wrapper === undefined || _this.wrapper.getChartType() !== _this.data.chartType) {
                    _this.convertOptions();
                    if (_this.data.firstRowIsData && Array.isArray(_this.data.dataTable)) {
                        _this.data.dataTable = google.visualization.arrayToDataTable(_this.data.dataTable, true);
                    }
                    _this.wrapper = new google.visualization.ChartWrapper(_this.data);
                    _this.registerChartWrapperEvents();
                }
                else {
                    // this.unregisterEvents();
                }
                _this.draw();
            });
        }
    };
    GoogleChartComponent.prototype.draw = function () {
        var _this = this;
        if (this.data.dataTable) {
            this.wrapper.setDataTable(this.data.dataTable);
            this._draw();
        }
        else if (this.data.dataSourceUrl) {
            var query = new google.visualization.Query(this.data.dataSourceUrl);
            if (this.data.refreshInterval) {
                query.setRefreshInterval(this.data.refreshInterval);
            }
            if (this.data.query) {
                query.setQuery(this.data.query);
            }
            query.send(function (queryResponse) {
                if (queryResponse.isError()) {
                    return;
                }
                var dt = queryResponse.getDataTable();
                _this.wrapper.setDataTable(dt);
                _this.data.dataTable = dt;
                _this._draw();
            });
        }
    };
    GoogleChartComponent.prototype._draw = function () {
        this.convertOptions();
        this.wrapper.setOptions(this.options);
        this.reformat();
        this.wrapper.draw(this.el.nativeElement.querySelector('div'));
    };
    /**
     * Applies formatters to data columns, if defined
     */
    GoogleChartComponent.prototype.reformat = function () {
        if (!this.data) {
            return;
        }
        if (this.data.formatters !== undefined) {
            var dt = this.wrapper.getDataTable();
            for (var _i = 0, _a = this.data.formatters; _i < _a.length; _i++) {
                var formatterConfig = _a[_i];
                var formatter = void 0;
                if (formatterConfig.type === 'PatternFormat') {
                    var _fmtOptions = formatterConfig.options;
                    formatter = new google.visualization.PatternFormat(_fmtOptions.pattern);
                    formatter.format(dt, formatterConfig.columns, _fmtOptions.dstColumnIndex);
                    continue;
                }
                var formatterConstructor = google.visualization[formatterConfig.type];
                var formatterOptions = formatterConfig.options;
                formatter = new formatterConstructor(formatterOptions);
                if (formatterConfig.type === 'ColorFormat' && formatterOptions) {
                    var _fmtOptions = formatterOptions;
                    for (var _b = 0, _c = _fmtOptions.ranges; _b < _c.length; _b++) {
                        var range = _c[_b];
                        if (typeof (range.fromBgColor) !== 'undefined' && typeof (range.toBgColor) !== 'undefined') {
                            formatter.addGradientRange(range.from, range.to, range.color, range.fromBgColor, range.toBgColor);
                        }
                        else {
                            formatter.addRange(range.from, range.to, range.color, range.bgcolor);
                        }
                    }
                }
                for (var _d = 0, _e = formatterConfig.columns; _d < _e.length; _d++) {
                    var col = _e[_d];
                    formatter.format(dt, col);
                }
            }
        }
    };
    GoogleChartComponent.prototype.getSelectorBySeriesType = function (seriesType) {
        var selectors = {
            bars: 'bar#%s#%r',
            haxis: 'hAxis#0#label',
            line: 'point#%s#%r',
            legend: 'legendentry#%s',
            area: 'point#%s#%r'
        };
        var selector = selectors[seriesType];
        return selector;
    };
    /**
     * Given a column number, counts how many
     * columns have rol=="data". Those are mapped
     * one-to-one to the series array. When rol is not defined
     * a column of type number means a series column.
     * @param column to inspect
     */
    GoogleChartComponent.prototype.getSeriesByColumn = function (column) {
        var series = 0;
        var dataTable = this.wrapper.getDataTable();
        for (var i = column - 1; i >= 0; i--) {
            var role = dataTable.getColumnRole(i);
            var type = dataTable.getColumnType(i);
            if (role === 'data' || type === 'number') {
                series++;
            }
        }
        return series;
    };
    GoogleChartComponent.prototype.getBoundingBoxForItem = function (item) {
        var boundingBox = { top: 0, left: 0, width: 0, height: 0 };
        if (this.cli) {
            var column = item.column;
            var series = this.getSeriesByColumn(column);
            var row = item.row;
            var seriesType = this.options.seriesType;
            if (this.options.series && this.options.series[series] && this.options.series[series].type) {
                seriesType = this.options.series[series].type;
            }
            if (seriesType) {
                var selector = this.getSelectorBySeriesType(seriesType);
                if (selector) {
                    selector = selector.replace('%s', series + '').replace('%c', column + '').replace('%r', row + '');
                    var box = this.cli.getBoundingBox(selector);
                    if (box) {
                        boundingBox = box;
                    }
                }
            }
        }
        return boundingBox;
    };
    GoogleChartComponent.prototype.getValueAtPosition = function (position) {
        if (position.row == null) {
            return null;
        }
        var dataTable = this.wrapper.getDataTable();
        var value = dataTable.getValue(position.row, position.column);
        return value;
    };
    GoogleChartComponent.prototype.getColumnTypeAtPosition = function (position) {
        var dataTable = this.wrapper.getDataTable();
        var type = dataTable.getColumnType(position.column) || '';
        return type;
    };
    GoogleChartComponent.prototype.getColumnLabelAtPosition = function (position) {
        var dataTable = this.wrapper.getDataTable();
        var type = dataTable.getColumnLabel(position.column) || '';
        return type;
    };
    GoogleChartComponent.prototype.getHTMLTooltip = function () {
        var tooltipER = new core_["ElementRef"](this.el.nativeElement.querySelector('.google-visualization-tooltip'));
        return new ChartHTMLTooltip(tooltipER);
    };
    GoogleChartComponent.prototype.parseMouseEvent = function (item) {
        var chartType = this.wrapper.getChartType();
        var eventColumn = item.column;
        if (eventColumn == null) {
            switch (chartType) {
                case 'Timeline':
                    eventColumn = this.wrapper.getDataTable().getNumberOfColumns() === 3 ? 0 : 1;
                    break;
                default:
                    eventColumn = 0;
            }
        }
        var eventRow = item.row;
        var myItem = {
            row: eventRow,
            column: eventColumn
        };
        var event = {
            position: item,
            boundingBox: this.getBoundingBoxForItem(myItem),
            value: this.getValueAtPosition(myItem),
            columnType: this.getColumnTypeAtPosition(myItem),
            columnLabel: this.getColumnLabelAtPosition(myItem)
        };
        return event;
    };
    GoogleChartComponent.prototype.unregisterEvents = function () {
        google.visualization.events.removeAllListeners(this.wrapper.getChart());
        google.visualization.events.removeAllListeners(this.wrapper);
    };
    GoogleChartComponent.prototype.registerChartEvents = function () {
        var _this = this;
        var chart = this.wrapper.getChart();
        this.cli = chart.getChartLayoutInterface ? chart.getChartLayoutInterface() : null;
        if (this.mouseOver.observers.length > 0) {
            google.visualization.events.addListener(chart, 'onmouseover', function (item) {
                var event = _this.parseMouseEvent(item);
                event.tooltip = _this.getHTMLTooltip();
                _this.mouseOver.emit(event);
            });
        }
        if (this.mouseOverOneTime.observers.length > 0) {
            google.visualization.events.addOneTimeListener(chart, 'onmouseover', function (item) {
                var event = _this.parseMouseEvent(item);
                event.tooltip = _this.getHTMLTooltip();
                _this.mouseOverOneTime.emit(event);
            });
        }
        if (this.mouseOut.observers.length > 0) {
            google.visualization.events.addListener(chart, 'onmouseout', function (item) {
                var event = _this.parseMouseEvent(item);
                _this.mouseOut.emit(event);
            });
        }
        if (this.mouseOutOneTime.observers.length > 0) {
            google.visualization.events.addOneTimeListener(chart, 'onmouseout', function (item) {
                var event = _this.parseMouseEvent(item);
                _this.mouseOutOneTime.emit(event);
            });
        }
        if (this.data.chartType === 'GeoChart') {
            if (this.regionClick.observers.length > 0) {
                google.visualization.events.addListener(chart, 'regionClick', function (item) {
                    _this.regionClick.emit(item);
                });
            }
            if (this.regionClickOneTime.observers.length > 0) {
                google.visualization.events.addOneTimeListener(chart, 'regionClick', function (item) {
                    _this.regionClick.emit(item);
                });
            }
        }
    };
    GoogleChartComponent.prototype.registerChartWrapperEvents = function () {
        var _this = this;
        google.visualization.events.addListener(this.wrapper, 'ready', function () {
            _this.chartReady.emit({ message: 'Chart ready' });
        });
        google.visualization.events.addOneTimeListener(this.wrapper, 'ready', function () {
            _this.chartReadyOneTime.emit({ message: 'Chart ready (one time)' });
            _this.registerChartEvents();
        });
        google.visualization.events.addListener(this.wrapper, 'error', function (error) {
            _this.chartError.emit(error);
        });
        google.visualization.events.addOneTimeListener(this.wrapper, 'error', function (error) {
            _this.chartErrorOneTime.emit(error);
        });
        this.addListener(this.wrapper, 'select', this.selectListener, this.chartSelect);
        this.addOneTimeListener(this.wrapper, 'select', this.selectListener, this.chartSelectOneTime);
    };
    GoogleChartComponent.prototype.addListener = function (source, eventType, listenerFn, evEmitter) {
        google.visualization.events.addListener(source, eventType, function () {
            evEmitter.emit(listenerFn());
        });
    };
    GoogleChartComponent.prototype.addOneTimeListener = function (source, eventType, listenerFn, evEmitter) {
        google.visualization.events.addOneTimeListener(source, eventType, function () {
            evEmitter.emit(listenerFn());
        });
    };
    GoogleChartComponent.prototype.convertOptions = function () {
        try {
            this.options = google.charts[this.data.chartType].convertOptions(this.options);
        }
        catch (error) {
            return;
        }
    };
    __decorate([
        Object(core_["Input"])()
    ], GoogleChartComponent.prototype, "data", void 0);
    __decorate([
        Object(core_["Output"])()
    ], GoogleChartComponent.prototype, "chartReady", void 0);
    __decorate([
        Object(core_["Output"])()
    ], GoogleChartComponent.prototype, "chartReadyOneTime", void 0);
    __decorate([
        Object(core_["Output"])()
    ], GoogleChartComponent.prototype, "chartError", void 0);
    __decorate([
        Object(core_["Output"])()
    ], GoogleChartComponent.prototype, "chartErrorOneTime", void 0);
    __decorate([
        Object(core_["Output"])()
    ], GoogleChartComponent.prototype, "chartSelect", void 0);
    __decorate([
        Object(core_["Output"])()
    ], GoogleChartComponent.prototype, "chartSelectOneTime", void 0);
    __decorate([
        Object(core_["Output"])()
    ], GoogleChartComponent.prototype, "mouseOver", void 0);
    __decorate([
        Object(core_["Output"])()
    ], GoogleChartComponent.prototype, "mouseOverOneTime", void 0);
    __decorate([
        Object(core_["Output"])()
    ], GoogleChartComponent.prototype, "mouseOut", void 0);
    __decorate([
        Object(core_["Output"])()
    ], GoogleChartComponent.prototype, "mouseOutOneTime", void 0);
    __decorate([
        Object(core_["Output"])()
    ], GoogleChartComponent.prototype, "regionClick", void 0);
    __decorate([
        Object(core_["Output"])()
    ], GoogleChartComponent.prototype, "regionClickOneTime", void 0);
    GoogleChartComponent = __decorate([
        Object(core_["Component"])({
            selector: 'google-chart',
            template: '<div></div>',
            changeDetection: core_["ChangeDetectionStrategy"].OnPush
        })
    ], GoogleChartComponent);
    return GoogleChartComponent;
}());


// EXTERNAL MODULE: ./.tmp/google-chart/chart-ready-event.ts
var chart_ready_event = __webpack_require__(4);

// EXTERNAL MODULE: ./.tmp/google-chart/chart-error-event.ts
var chart_error_event = __webpack_require__(3);

// EXTERNAL MODULE: ./.tmp/google-chart/chart-select-event.ts
var chart_select_event = __webpack_require__(2);

// CONCATENATED MODULE: ./.tmp/google-chart/chart-mouse-event.ts
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var ChartMouseEvent = /** @class */ (function () {
    function ChartMouseEvent() {
    }
    return ChartMouseEvent;
}());

/**
 * @deprecated Use ChartMouseOverEvent instead
 */
var MouseOverEvent = /** @class */ (function (_super) {
    __extends(MouseOverEvent, _super);
    function MouseOverEvent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MouseOverEvent;
}(ChartMouseEvent));

var ChartMouseOverEvent = /** @class */ (function (_super) {
    __extends(ChartMouseOverEvent, _super);
    function ChartMouseOverEvent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ChartMouseOverEvent;
}(ChartMouseEvent));

var ChartMouseOutEvent = /** @class */ (function (_super) {
    __extends(ChartMouseOutEvent, _super);
    function ChartMouseOutEvent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ChartMouseOutEvent;
}(ChartMouseEvent));


// EXTERNAL MODULE: ./.tmp/google-chart/geochart-events.ts
var geochart_events = __webpack_require__(1);

// CONCATENATED MODULE: ./.tmp/google-charts-loader.service.ts
var google_charts_loader_service_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};

var google_charts_loader_service_GoogleChartsLoaderService = /** @class */ (function () {
    function GoogleChartsLoaderService(localeId, googleChartsVersion, mapsApiKey) {
        this.googleChartsVersion = googleChartsVersion;
        this.mapsApiKey = mapsApiKey;
        this.googleScriptLoadingNotifier = new core_["EventEmitter"]();
        this.googleScriptIsLoading = false;
        this.localeId = localeId;
        if (this.googleChartsVersion === null) {
            this.googleChartsVersion = '46';
        }
    }
    GoogleChartsLoaderService.prototype.load = function (packages) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (resolve === void 0) { resolve = Function.prototype; }
            if (reject === void 0) { reject = Function.prototype; }
            _this.loadGoogleChartsScript().then(function () {
                var initializer = {
                    language: _this.localeId,
                    callback: resolve,
                    packages: packages
                };
                if (_this.mapsApiKey) {
                    initializer.mapsApiKey = _this.mapsApiKey;
                }
                google.charts.load(_this.googleChartsVersion, initializer);
            }).catch(function (err) { return reject(); });
        });
    };
    GoogleChartsLoaderService.prototype.loadGoogleChartsScript = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (resolve === void 0) { resolve = Function.prototype; }
            if (reject === void 0) { reject = Function.prototype; }
            if (typeof google !== 'undefined' && google.charts) {
                resolve();
            }
            else if (!_this.googleScriptIsLoading) {
                _this.googleScriptIsLoading = true;
                var script = document.createElement('script');
                script.type = 'text/javascript';
                script.src = 'https://www.gstatic.com/charts/loader.js';
                script.async = true;
                script.defer = true;
                script.onload = function () {
                    _this.googleScriptIsLoading = false;
                    _this.googleScriptLoadingNotifier.emit(true);
                    resolve();
                };
                script.onerror = function () {
                    _this.googleScriptIsLoading = false;
                    _this.googleScriptLoadingNotifier.emit(false);
                    reject();
                };
                document.getElementsByTagName('head')[0].appendChild(script);
            }
            else {
                _this.googleScriptLoadingNotifier.subscribe(function (loaded) {
                    if (loaded) {
                        resolve();
                    }
                    else {
                        reject();
                    }
                });
            }
        });
    };
    GoogleChartsLoaderService = google_charts_loader_service_decorate([
        Object(core_["Injectable"])(),
        __param(0, Object(core_["Inject"])(core_["LOCALE_ID"])),
        __param(1, Object(core_["Inject"])('googleChartsVersion')), __param(1, Object(core_["Optional"])()),
        __param(2, Object(core_["Inject"])('mapsApiKey')), __param(2, Object(core_["Optional"])())
    ], GoogleChartsLoaderService);
    return GoogleChartsLoaderService;
}());


// CONCATENATED MODULE: ./.tmp/google-charts.module.ts
var google_charts_module_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};



var google_charts_module_Ng2GoogleChartsModule = /** @class */ (function () {
    function Ng2GoogleChartsModule() {
    }
    Ng2GoogleChartsModule = google_charts_module_decorate([
        Object(core_["NgModule"])({
            declarations: [
                google_chart_component_GoogleChartComponent
            ],
            providers: [
                google_charts_loader_service_GoogleChartsLoaderService
            ],
            exports: [
                google_chart_component_GoogleChartComponent
            ]
        })
    ], Ng2GoogleChartsModule);
    return Ng2GoogleChartsModule;
}());


// CONCATENATED MODULE: ./.tmp/index.ts
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "GoogleChartComponent", function() { return google_chart_component_GoogleChartComponent; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "ChartReadyEvent", function() { return chart_ready_event["ChartReadyEvent"]; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "ChartErrorEvent", function() { return chart_error_event["ChartErrorEvent"]; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "ChartSelectEvent", function() { return chart_select_event["ChartSelectEvent"]; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "ChartHTMLTooltip", function() { return ChartHTMLTooltip; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "ChartMouseOverEvent", function() { return ChartMouseOverEvent; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "ChartMouseOutEvent", function() { return ChartMouseOutEvent; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "MouseOverEvent", function() { return MouseOverEvent; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "RegionClickEvent", function() { return geochart_events["RegionClickEvent"]; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "BoundingBox", function() { return /* Cannot get final name for export "BoundingBox" in "./.tmp/google-chart/chart-mouse-event.ts" (known exports: ChartMouseEvent MouseOverEvent ChartMouseOverEvent ChartMouseOutEvent, known reexports: ) */ undefined; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "DataPointPosition", function() { return /* Cannot get final name for export "DataPointPosition" in "./.tmp/google-chart/chart-mouse-event.ts" (known exports: ChartMouseEvent MouseOverEvent ChartMouseOverEvent ChartMouseOutEvent, known reexports: ) */ undefined; });
/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, "Ng2GoogleChartsModule", function() { return google_charts_module_Ng2GoogleChartsModule; });












/***/ })
/******/ ]);
});
//# sourceMappingURL=ng2-google-charts.umd.js.map